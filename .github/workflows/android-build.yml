name: Android Build and Release

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'android_app/**'
      - '.github/workflows/android-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'android_app/**'
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.9'
  JAVA_VERSION: '11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('android_app/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd android_app
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: Lint with flake8
      run: |
        cd android_app
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        cd android_app
        pytest tests/ --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./android_app/coverage.xml
        flags: android
        name: android-coverage

  build-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache buildozer global directory
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('android_app/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: Cache buildozer dependencies
      uses: actions/cache@v3
      with:
        path: android_app/.buildozer
        key: ${{ runner.os }}-buildozer-deps-${{ hashFiles('android_app/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-deps-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip openjdk-8-jdk python3-pip autoconf libtool pkg-config \
          zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake \
          libffi-dev libssl-dev build-essential libltdl-dev \
          ccache
          
    - name: Install Python dependencies
      run: |
        cd android_app
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install buildozer cython
        
    - name: Build debug APK
      run: |
        cd android_app
        buildozer android debug
        
    - name: Upload debug APK
      uses: actions/upload-artifact@v3
      with:
        name: debug-apk
        path: android_app/bin/*.apk
        retention-days: 30

  build-release:
    name: Build Release APK
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache buildozer global directory
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('android_app/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: Cache buildozer dependencies
      uses: actions/cache@v3
      with:
        path: android_app/.buildozer
        key: ${{ runner.os }}-buildozer-deps-${{ hashFiles('android_app/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-deps-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip openjdk-8-jdk python3-pip autoconf libtool pkg-config \
          zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake \
          libffi-dev libssl-dev build-essential libltdl-dev \
          ccache
          
    - name: Install Python dependencies
      run: |
        cd android_app
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install buildozer cython
        
    - name: Decode keystore
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        if [ -n "$KEYSTORE_BASE64" ]; then
          echo $KEYSTORE_BASE64 | base64 -d > android_app/my-release-key.keystore
        fi
        
    - name: Build release APK
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        cd android_app
        if [ -f "my-release-key.keystore" ]; then
          buildozer android release
        else
          echo "No keystore found, building unsigned release"
          buildozer android debug
        fi
        
    - name: Sign APK
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        cd android_app
        if [ -f "my-release-key.keystore" ] && [ -f "bin/turbo_notes-*-release-unsigned.apk" ]; then
          # Sign the APK
          jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
            -keystore my-release-key.keystore \
            -storepass $KEYSTORE_PASSWORD \
            -keypass $KEY_PASSWORD \
            bin/turbo_notes-*-release-unsigned.apk $KEY_ALIAS
          
          # Align the APK
          zipalign -v 4 bin/turbo_notes-*-release-unsigned.apk bin/turbo_notes-release-signed.apk
        fi
        
    - name: Upload release APK
      uses: actions/upload-artifact@v3
      with:
        name: release-apk
        path: |
          android_app/bin/*.apk
        retention-days: 90
        
    - name: Upload to GitHub Release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: android_app/bin/turbo_notes-release-signed.apk
        asset_name: turbo-notes-android-${{ github.event.release.tag_name }}.apk
        asset_content_type: application/vnd.android.package-archive

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      uses: securecodewarrior/github-action-bandit@v1
      with:
        path: android_app/
        
    - name: Run Safety check
      run: |
        cd android_app
        pip install safety
        safety check -r requirements.txt

  deploy-internal:
    name: Deploy to Internal Testing
    runs-on: ubuntu-latest
    needs: [build-release]
    if: github.event_name == 'release' && contains(github.event.release.tag_name, 'beta')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release APK
      uses: actions/download-artifact@v3
      with:
        name: release-apk
        path: ./apk/
        
    - name: Deploy to Google Play Internal Testing
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: com.turbo.notes
        releaseFiles: ./apk/*.apk
        track: internal
        status: completed

  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [test, build-debug, build-release]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#builds'
        text: '✅ Android build succeeded for ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#builds'
        text: '❌ Android build failed for ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build-debug]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download debug APK
      uses: actions/download-artifact@v3
      with:
        name: debug-apk
        path: ./apk/
        
    - name: Run APK analyzer
      run: |
        # Install APK analyzer
        wget https://github.com/google/android-classyshark/releases/download/8.2/ClassyShark.jar
        
        # Analyze APK
        java -jar ClassyShark.jar -open ./apk/*.apk -inspect > apk-analysis.txt
        
        # Check APK size
        APK_SIZE=$(stat -c%s ./apk/*.apk)
        echo "APK Size: $APK_SIZE bytes"
        
        # Fail if APK is too large (50MB limit)
        if [ $APK_SIZE -gt 52428800 ]; then
          echo "APK size exceeds 50MB limit"
          exit 1
        fi
        
    - name: Upload APK analysis
      uses: actions/upload-artifact@v3
      with:
        name: apk-analysis
        path: apk-analysis.txt 