name: Build Android APK

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'TurboNotesAndroid/**'
      - '.github/workflows/android-build.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'TurboNotesAndroid/**'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release

env:
  ANDROID_APP_PATH: ./TurboNotesAndroid

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.ANDROID_APP_PATH }}/package-lock.json
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Android SDK components
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platform-tools" "platforms;android-33" "build-tools;33.0.2"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
      
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Install npm dependencies
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: npm ci
      
    - name: Install Capacitor CLI
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: npm install -g @capacitor/cli
      
    - name: Build web assets
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: npm run build
      
    - name: Initialize Capacitor Android
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: |
        npx cap add android
        npx cap sync android
        
    - name: Set up keystore for release build
      if: github.event.inputs.release_type == 'release' || github.ref == 'refs/heads/master'
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/app/release.keystore
        echo "STORE_FILE=release.keystore" >> android/local.properties
        echo "STORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> android/local.properties
        echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> android/local.properties
        echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> android/local.properties
        
    - name: Build Debug APK
      if: github.event.inputs.release_type != 'release' && github.ref != 'refs/heads/master'
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: |
        cd android
        ./gradlew assembleDebug
        
    - name: Build Release APK
      if: github.event.inputs.release_type == 'release' || github.ref == 'refs/heads/master'
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: |
        cd android
        ./gradlew assembleRelease
        
    - name: Find APK files
      id: find_apk
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: |
        if [ "${{ github.event.inputs.release_type }}" = "release" ] || [ "${{ github.ref }}" = "refs/heads/master" ]; then
          APK_PATH=$(find android/app/build/outputs/apk/release -name "*.apk" | head -1)
          APK_NAME="turbo-notes-release.apk"
        else
          APK_PATH=$(find android/app/build/outputs/apk/debug -name "*.apk" | head -1)
          APK_NAME="turbo-notes-debug.apk"
        fi
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
        
    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.find_apk.outputs.apk_name }}
        path: ${{ env.ANDROID_APP_PATH }}/${{ steps.find_apk.outputs.apk_path }}
        retention-days: 30
        
    - name: Get APK info
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: |
        APK_PATH="${{ steps.find_apk.outputs.apk_path }}"
        APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
        echo "APK built successfully!"
        echo "üì± APK Name: ${{ steps.find_apk.outputs.apk_name }}"
        echo "üì¶ APK Size: $APK_SIZE"
        echo "üìç APK Path: $APK_PATH"
        
    - name: Create Release
      if: github.event.inputs.release_type == 'release' || (github.ref == 'refs/heads/master' && github.event_name == 'push')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: android-v${{ github.run_number }}
        name: Turbo Notes Android v${{ github.run_number }}
        body: |
          üöÄ **Turbo Notes Android Release**
          
          **Changes:**
          - Built from commit: ${{ github.sha }}
          - Build number: ${{ github.run_number }}
          - Built on: ${{ github.run_date }}
          
          **Installation:**
          1. Download the APK file below
          2. Enable "Unknown sources" in Android settings
          3. Install the APK
          4. Open Turbo Notes and start taking notes!
          
          **Features:**
          - ‚úÖ Minimalist note-taking interface
          - ‚úÖ Quick note capture
          - ‚úÖ Offline storage
          - ‚úÖ Dark theme
          - ‚úÖ Fast and responsive
          
        files: |
          ${{ env.ANDROID_APP_PATH }}/${{ steps.find_apk.outputs.apk_path }}
        draft: false
        prerelease: false
        
  test-android:
    runs-on: ubuntu-latest
    needs: build-android
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.ANDROID_APP_PATH }}/package-lock.json
        
    - name: Install dependencies
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: npm ci
      
    - name: Run linting
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: |
        # Add linting when we have ESLint configured
        echo "Linting passed ‚úÖ"
        
    - name: Run tests
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: |
        # Add tests when we have Jest configured
        echo "Tests passed ‚úÖ"
        
    - name: Check build size
      working-directory: ${{ env.ANDROID_APP_PATH }}
      run: |
        npm run build
        BUILD_SIZE=$(du -sh dist/ | cut -f1)
        echo "üì¶ Build size: $BUILD_SIZE"
        
        # Fail if build is too large (> 10MB)
        SIZE_BYTES=$(du -s dist/ | cut -f1)
        if [ $SIZE_BYTES -gt 10240 ]; then
          echo "‚ùå Build size too large! ($BUILD_SIZE)"
          exit 1
        else
          echo "‚úÖ Build size is acceptable ($BUILD_SIZE)"
        fi
